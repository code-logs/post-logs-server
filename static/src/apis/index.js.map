{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/apis/index.ts"],"names":[],"mappings":"AAEA,OAAO,OAAO,MAAM,qBAAqB,CAAA;AAEzC,MAAM,CAAC,MAAM,IAAI,GAAG;IAClB,KAAK,CAAC,QAAQ;QACZ,OAAO,OAAO,CAAC,GAAG,CAAS,QAAQ,CAAC,CAAA;IACtC,CAAC;IAED,KAAK,CAAC,OAAO,CAAC,IAAY;QACxB,OAAO,OAAO,CAAC,GAAG,CAAO,UAAU,IAAI,EAAE,CAAC,CAAA;IAC5C,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,QAAkB,EAAE,OAAe,EAAE,SAAe;QACnE,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAA;QAC/B,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrD,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QACnC,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAA;QAEvC,OAAO,OAAO,CAAC,IAAI,CAAiB,QAAQ,EAAE,QAAQ,EAAE;YACtD,cAAc,EAAE,qBAAqB;SACtC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,UAAU,CACd,MAAc,EACd,QAAkB,EAClB,OAAe,EACf,SAAgB;QAEhB,MAAM,QAAQ,GAAG,IAAI,QAAQ,EAAE,CAAA;QAC/B,QAAQ,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAA;QACrD,QAAQ,CAAC,MAAM,CAAC,SAAS,EAAE,OAAO,CAAC,CAAA;QACnC,IAAI,SAAS;YAAE,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,SAAS,CAAC,CAAA;QAEtD,OAAO,OAAO,CAAC,GAAG,CAAiB,UAAU,MAAM,EAAE,EAAE,QAAQ,EAAE;YAC/D,cAAc,EAAE,qBAAqB;SACtC,CAAC,CAAA;IACJ,CAAC;IAED,KAAK,CAAC,UAAU,CAAC,YAAoB;QACnC,MAAM,OAAO,CAAC,MAAM,CAAO,UAAU,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,EAAE,CAAC,CAAA;IAC3E,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,OAAO,CAAC,IAAI,CAA4B,SAAS,CAAC,CAAA;IAC3D,CAAC;IAED,KAAK,CAAC,aAAa;QACjB,OAAO,OAAO,CAAC,GAAG,CAAW,aAAa,CAAC,CAAA;IAC7C,CAAC;IAED,KAAK,CAAC,OAAO;QACX,OAAO,OAAO,CAAC,GAAG,CAAQ,OAAO,CAAC,CAAA;IACpC,CAAC;IAED,KAAK,CAAC,mBAAmB;QACvB,OAAO,OAAO,CAAC,GAAG,CAAgB,oCAAoC,CAAC,CAAA;IACzE,CAAC;IAED,KAAK,CAAC,cAAc;QAClB,OAAO,OAAO,CAAC,IAAI,CAAgB,iCAAiC,CAAC,CAAA;IACvE,CAAC;IAED,KAAK,CAAC,gBAAgB;QACpB,OAAO,OAAO,CAAC,GAAG,CAAS,iBAAiB,CAAC,CAAA;IAC/C,CAAC;IAED,KAAK,CAAC,WAAW;QACf,OAAO,OAAO,CAAC,GAAG,CAAgB,0BAA0B,CAAC,CAAA;IAC/D,CAAC;IAED,KAAK,CAAC,YAAY,CAAC,OAAe;QAChC,OAAO,OAAO,CAAC,IAAI,CACjB,+BAA+B,EAC/B,EAAE,OAAO,EAAE,CACZ,CAAA;IACH,CAAC;CACF,CAAA","sourcesContent":["import { Post, TempPost } from '../types/post.js'\nimport { Tag } from '../types/tag.js'\nimport fetcher from '../utils/fetcher.js'\n\nexport const apis = {\n  async getPosts() {\n    return fetcher.get<Post[]>('/posts')\n  },\n\n  async getPost(name: string) {\n    return fetcher.get<Post>(`/posts/${name}`)\n  },\n\n  async createPost(tempPost: TempPost, content: string, thumbnail: File) {\n    const formData = new FormData()\n    formData.append('tempPost', JSON.stringify(tempPost))\n    formData.append('content', content)\n    formData.append('thumbnail', thumbnail)\n\n    return fetcher.post<Post, FormData>('/posts', formData, {\n      'content-type': 'multipart/form-data',\n    })\n  },\n\n  async updatePost(\n    postId: string,\n    tempPost: TempPost,\n    content: string,\n    thumbnail?: File\n  ) {\n    const formData = new FormData()\n    formData.append('tempPost', JSON.stringify(tempPost))\n    formData.append('content', content)\n    if (thumbnail) formData.append('thumbnail', thumbnail)\n\n    return fetcher.put<Post, FormData>(`/posts/${postId}`, formData, {\n      'content-type': 'multipart/form-data',\n    })\n  },\n\n  async deletePost(postFilename: string) {\n    await fetcher.delete<void>(`/posts/${postFilename.replace(/\\.md$/, '')}`)\n  },\n\n  async deployPosts() {\n    return fetcher.post<Post, { result: boolean }>('/deploy')\n  },\n\n  async getCategories() {\n    return fetcher.get<string[]>('/categories')\n  },\n\n  async getTags() {\n    return fetcher.get<Tag[]>('/tags')\n  },\n\n  async getLastSyncDatetime() {\n    return fetcher.get<number | null>('/configurations/last-sync-datetime')\n  },\n\n  async syncRepository() {\n    return fetcher.post<boolean, void>('/configurations/sync-repository')\n  },\n\n  async getModifiedPosts() {\n    return fetcher.get<Post[]>('/modified-posts')\n  },\n\n  async getTemplate() {\n    return fetcher.get<string | null>('/configurations/template')\n  },\n\n  async saveTemplate(content: string) {\n    return fetcher.post<string, { content: string }>(\n      '/configurations/save-template',\n      { content }\n    )\n  },\n}\n"]}