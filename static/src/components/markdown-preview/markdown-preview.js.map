{"version":3,"file":"markdown-preview.js","sourceRoot":"","sources":["../../../../src/components/markdown-preview/markdown-preview.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,UAAU,EAAkB,MAAM,KAAK,CAAA;AAC3D,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAC3D,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAA;AAC/B,OAAO,cAAc,MAAM,sBAAsB,CAAA;AAGjD,IAAa,eAAe,GAA5B,MAAa,eAAgB,SAAQ,UAAU;IA4B7C,IAAI,OAAO;QACT,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAC,UAAU,CAAC,CAAA;QACzD,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAA;QAE/D,OAAO,OAAyB,CAAA;IAClC,CAAC;IAES,OAAO,CAAC,YAA4B;QAC5C,IAAI,YAAY,CAAC,GAAG,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjD,IAAI,CAAC,UAAU,EAAE,CAAA;YACjB,IAAI,CAAC,kBAAkB,EAAE,CAAA;SAC1B;IACH,CAAC;IAEO,KAAK,CAAC,kBAAkB;QAC9B,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAA;QACxD,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACvB,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAA;QACrC,CAAC,CAAC,CAAA;IACJ,CAAC;IAEO,UAAU;QAChB,IAAI,CAAC,IAAI,CAAC,QAAQ;YAAE,OAAM;QAE1B,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG;QACrB,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC;KAC9B,CAAA;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,4BAA4B,CAAA;IACzC,CAAC;CACF,CAAA;AAxDQ,sBAAM,GAAG,GAAG,CAAA;MACf,cAAc;;;;;;;;;;;;;;;;;;;;;GAqBjB,CAAA;AAxBD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;iDACV;AAFN,eAAe;IAD3B,aAAa,CAAC,kBAAkB,CAAC;GACrB,eAAe,CA4D3B;SA5DY,eAAe","sourcesContent":["import { css, html, LitElement, PropertyValues } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { marked } from 'marked'\nimport highlightStyle from './highlight-style.js'\n\n@customElement('markdown-preview')\nexport class MarkdownPreview extends LitElement {\n  @property({ type: String })\n  markdown!: string\n\n  static styles = css`\n    ${highlightStyle}\n    #preview {\n      font-family: sans-serif;\n      color: var(--theme-font-color);\n      font-size: 14px;\n      background-color: var(--theme-light-background-color);\n      padding: 10px;\n      border: 1px dashed var(--theme-red-color);\n      height: 700px;\n      outline: none;\n      tab-size: 2;\n      overflow: auto;\n      box-sizing: border-box;\n    }\n    #preview::-webkit-scrollbar {\n      cursor: default;\n      width: 5px;\n    }\n    #preview::-webkit-scrollbar-thumb {\n      background-color: var(--theme-red-color);\n    }\n  `\n\n  get preview() {\n    const preview = this.renderRoot.querySelector('#preview')\n    if (!preview) throw new Error('Failed to find preview element')\n\n    return preview as HTMLDivElement\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has('markdown') && this.markdown) {\n      this.renderHtml()\n      this.highlightCodeBlock()\n    }\n  }\n\n  private async highlightCodeBlock() {\n    const blocks = this.preview.querySelectorAll('pre code')\n    blocks.forEach((block) => {\n      window.hljs.highlightElement(block)\n    })\n  }\n\n  private renderHtml() {\n    if (!this.markdown) return\n\n    this.preview.innerHTML = `\n      ${marked.parse(this.markdown)}\n    `\n  }\n\n  render() {\n    return html` <div id=\"preview\"></div> `\n  }\n}\n"]}