{"version":3,"file":"reference-selector.js","sourceRoot":"","sources":["../../../../src/components/reference-selector/reference-selector.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { marked } from 'marked'\nimport { PostRef, TempPostRef } from '../../types/post-ref.js'\nimport {\n  buttonBoxStyle,\n  h2Style,\n  h3Style,\n  sectionStyle,\n} from '../styles/styles.js'\n\n@customElement('reference-selector')\nexport class ReferenceSelector extends LitElement {\n  @property({ type: String })\n  content!: string\n\n  @property({ type: Array })\n  references: PostRef[] = []\n\n  @property({ type: Array })\n  private newReferences: TempPostRef[] = []\n\n  static styles = css`\n    ${sectionStyle}\n    ${h2Style}\n    ${h3Style}\n    ${buttonBoxStyle}\n    #reference-selector ul {\n      display: grid;\n      grid-template-columns: repeat(2, 1fr);\n      gap: 5px;\n      list-style: none;\n      margin: 0;\n      padding: 0;\n    }\n    #reference-selector li label {\n      display: grid;\n      grid-template-columns: auto 1fr 1fr;\n      gap: 5px;\n    }\n    #reference-selector input {\n      box-sizing: border-box;\n      border: 1px dashed var(--theme-red-color);\n      outline: none;\n      background-color: transparent;\n      max-width: 180px;\n      height: 30px;\n      margin: auto 0;\n      padding: 0 5px;\n    }\n    #reference-selector #new-reference-form {\n      display: grid;\n      grid-template-columns: 1fr 1fr auto;\n      margin-bottom: 10px;\n      gap: 10px;\n    }\n    #reference-selector #new-reference-form input {\n      max-width: inherit;\n    }\n    #reference-selector #new-reference-form button {\n      height: 30px;\n      min-width: initial;\n      padding: 0 10px;\n    }\n    #reference-selector .input-container {\n      display: flex;\n      gap: 10px;\n    }\n    #reference-selector .input-container a {\n      margin: auto 0;\n      white-space: nowrap;\n      text-overflow: ellipsis;\n      overflow: hidden;\n      max-width: 160px;\n    }\n  `\n\n  private get newRefForm() {\n    const newRefForm = this.renderRoot.querySelector<HTMLFormElement>(\n      '#new-reference-form'\n    )\n    if (!newRefForm) throw new Error('Failed to find target from')\n\n    return newRefForm\n  }\n\n  private get newRefTitleInput() {\n    const input = this.renderRoot.querySelector<HTMLInputElement>(\n      '#reference-title-input'\n    )\n    if (!input) throw new Error('Failed to find target input')\n\n    return input\n  }\n\n  private get newRefUrlInput() {\n    const input = this.renderRoot.querySelector<HTMLInputElement>(\n      '#reference-url-input'\n    )\n    if (!input) throw new Error('Failed to find target input')\n\n    return input\n  }\n\n  public get selectedRefs(): TempPostRef[] {\n    const refCheckboxes = Array.from(\n      this.renderRoot.querySelectorAll<HTMLInputElement>(\n        '#reference-selector input'\n      )\n    )\n    const selectedCheckboxes = refCheckboxes.filter((input) => input.checked)\n    return selectedCheckboxes.map((checkbox) => {\n      const { title, url } = checkbox.dataset\n      return { title, url } as TempPostRef\n    })\n  }\n\n  private computeReferenceCandidates(content: string) {\n    const tempContainer = document.createElement('div')\n    tempContainer.innerHTML = marked.parse(content)\n    const anchorTags = tempContainer.querySelectorAll<HTMLAnchorElement>('a')\n\n    if (!anchorTags.length) {\n      tempContainer.remove()\n      return []\n    }\n\n    const tempRefCandidates: TempPostRef[] = []\n    anchorTags.forEach((anchorTag) => {\n      const { href, innerText } = anchorTag\n      if (!href?.startsWith(window.location.origin)) {\n        tempRefCandidates.push({ title: innerText || href, url: href })\n      }\n    })\n\n    tempContainer.remove()\n    return tempRefCandidates\n  }\n\n  private addNewReference(event: Event) {\n    event.preventDefault()\n\n    const newRefURLs = this.newReferences.map(({ url }) => url)\n    const title = this.newRefTitleInput.value\n    const url = this.newRefUrlInput.value\n\n    if (newRefURLs.indexOf(url) >= 0) {\n      alert('동일한 참조항목이 존재 합니다.')\n      return\n    }\n\n    this.newReferences = [...this.newReferences, { title, url }]\n    this.newRefForm.reset()\n    this.newRefTitleInput.focus()\n  }\n\n  render() {\n    let contentRefCandidates: (PostRef | TempPostRef)[] = []\n    if (this.content) {\n      contentRefCandidates = this.computeReferenceCandidates(this.content)\n    }\n\n    return html`<section id=\"reference-selector\" class=\"container\">\n      <header>\n        <h2>References</h2>\n      </header>\n\n      ${this.references.length\n        ? html`<section>\n            <h3>Registered References</h3>\n            <ul>\n              ${this.references.map(\n                (ref) => html`<li>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      .defaultChecked=${true}\n                      data-title=${ref.title}\n                      data-url=${ref.url}\n                    />\n                    <div class=\"input-container\">\n                      <input .value=${ref.title} />\n                      <a href=\"${ref.url}\" target=\"_blank\">${ref.url}</a>\n                    </div>\n                  </label>\n                </li>`\n              )}\n            </ul>\n          </section>`\n        : ''}\n      ${contentRefCandidates.length\n        ? html`<section>\n            <h3>Content References</h3>\n            <ul>\n              ${contentRefCandidates.map(\n                (ref) => html`<li>\n                  <label>\n                    <input\n                      type=\"checkbox\"\n                      data-title=${ref.title}\n                      data-url=${ref.url}\n                    />\n                    <div class=\"input-container\">\n                      <input .value=${ref.title} />\n                      <a href=\"${ref.url}\" target=\"_blank\">${ref.url}</a>\n                    </div>\n                  </label>\n                </li>`\n              )}\n            </ul>\n          </section>`\n        : ''}\n\n      <section id=\"custom-ref-container\">\n        <h3>Custom References</h3>\n        <form id=\"new-reference-form\" @submit=${this.addNewReference}>\n          <input id=\"reference-title-input\" required placeholder=\"이름\" />\n          <input\n            id=\"reference-url-input\"\n            required\n            type=\"url\"\n            placeholder=\"URL\"\n          />\n          <button>+</button>\n        </form>\n\n        <ul>\n          ${this.newReferences.map(\n            (ref) => html`<li>\n              <label>\n                <input\n                  type=\"checkbox\"\n                  .defaultChecked=${true}\n                  data-title=${ref.title}\n                  data-url=${ref.url}\n                />\n                <div class=\"input-container\">\n                  <input .value=${ref.title} />\n                  <a href=\"${ref.url}\" target=\"_blank\">${ref.url}</a>\n                </div>\n              </label>\n            </li>`\n          )}\n        </ul>\n      </section>\n    </section>`\n  }\n}\n"]}