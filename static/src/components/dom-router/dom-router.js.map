{"version":3,"file":"dom-router.js","sourceRoot":"","sources":["../../../../src/components/dom-router/dom-router.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement, PropertyValueMap } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { Page } from './types/page.js'\n\nexport const navigate = (route: string) => {\n  if (route === window.location.pathname) return\n  const navigateEvent = new CustomEvent('navigate', { detail: { route } })\n  document.dispatchEvent(navigateEvent)\n}\n\n@customElement('dom-router')\nexport class DomRouter extends LitElement {\n  @property({ type: Array })\n  pages: Page[] = []\n\n  private activePage?: Page\n\n  private readonly PAGE_ACTIVE_FLAG = 'active'\n\n  private loadedPageRoutes: Set<string> = new Set<string>()\n\n  private navigateHandler?: (event: Event) => void\n\n  private popStateHandler?: () => void\n\n  connectedCallback() {\n    super.connectedCallback?.()\n    this.navigateHandler = this.onNavigateHandler.bind(this)\n    this.popStateHandler = this.onPopStateHandler.bind(this)\n    document.addEventListener('navigate', this.navigateHandler)\n    window.addEventListener('popstate', this.popStateHandler)\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback?.()\n    if (this.navigateHandler)\n      document.removeEventListener('navigate', this.navigateHandler)\n    if (this.popStateHandler)\n      window.removeEventListener('popstate', this.popStateHandler)\n  }\n\n  static styles = css`\n    :host {\n      display: flex;\n      flex-direction: column;\n    }\n    ::slotted(*) {\n      display: none;\n    }\n    ::slotted([active]) {\n      display: initial;\n    }\n  `\n\n  protected firstUpdated() {\n    if (!this.pages.length) throw new Error('No pages initialized')\n  }\n\n  protected updated(props: PropertyValueMap<DomRouter>) {\n    if (props.has('pages') && !this.activePage) {\n      this.initActivePage()\n    }\n  }\n\n  render() {\n    return html`<slot></slot>`\n  }\n\n  private getPageElement(targetPage: Page) {\n    const pageElement = this.querySelector(targetPage.tagName)\n    if (!pageElement) throw new Error('No page element found')\n\n    return pageElement\n  }\n\n  private get currentPageElement() {\n    return this.querySelector(`[${this.PAGE_ACTIVE_FLAG}]`)\n  }\n\n  private initActivePage() {\n    const targetPage = this.findMatchedPage()\n    this.mount(targetPage)\n  }\n\n  private async mount(targetPage: Page) {\n    if (!this.loadedPageRoutes.has(targetPage.route)) {\n      await this.importPage(targetPage)\n      this.loadedPageRoutes.add(targetPage.route)\n    }\n\n    this.appendPage(targetPage)\n    const targetPageElement = this.getPageElement(targetPage)\n    targetPageElement.setAttribute(this.PAGE_ACTIVE_FLAG, '')\n  }\n\n  private unmount() {\n    const pageElement = this.currentPageElement\n    pageElement?.removeAttribute(this.PAGE_ACTIVE_FLAG)\n    pageElement?.remove()\n  }\n\n  private async importPage(targetPage: Page) {\n    await import(targetPage.importPath)\n  }\n\n  private async appendPage(targetPage: Page) {\n    const pageElement = document.createElement(targetPage.tagName)\n    this.appendChild(pageElement)\n  }\n\n  private onNavigateHandler(event: Event) {\n    if (event instanceof CustomEvent) {\n      const { route } = event.detail\n      window.history.pushState(null, '', route)\n\n      this.reloadPage()\n    }\n  }\n\n  private onPopStateHandler() {\n    this.reloadPage()\n  }\n\n  private reloadPage() {\n    const page = this.findMatchedPage()\n\n    this.unmount()\n    this.mount(page)\n  }\n\n  private findMatchedPage() {\n    const page = this.pages.find(({ route }) => {\n      const pageRouteElements = route.split(/\\//)\n      const pathElements = window.location.pathname.split(/\\//)\n\n      return pageRouteElements.every((routeElement, index) => {\n        if (routeElement.startsWith(':')) return true\n\n        return routeElement === pathElements[index]\n      })\n    })\n\n    if (!page) throw new Error('Failed to find matched page')\n\n    return page\n  }\n}\n"]}