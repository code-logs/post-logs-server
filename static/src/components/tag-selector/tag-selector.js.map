{"version":3,"file":"tag-selector.js","sourceRoot":"","sources":["../../../../src/components/tag-selector/tag-selector.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, LitElement } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { apis } from '../../apis/index.js'\nimport { Tag, TempTag } from '../../types/tag.js'\nimport { h2Style, sectionStyle } from '../styles/styles.js'\n\n@customElement('tag-selector')\nexport class TagSelector extends LitElement {\n  @property({ type: Array })\n  private tags: Tag[] = []\n\n  @property({ type: Array })\n  chosenTags: (Tag | TempTag)[] = []\n\n  @property({ type: Array })\n  newTags: TempTag[] = []\n\n  static styles = css`\n    ${sectionStyle}\n    ${h2Style}\n    #tag-selector > label > input {\n      box-sizing: border-box;\n      border: 1px dashed var(--theme-red-color);\n      outline: none;\n      background-color: transparent;\n      max-width: 180px;\n      height: 30px;\n      margin: auto 0 5px 0;\n      padding: 0 5px;\n    }\n    #tag-selector > div {\n      display: grid;\n      grid-template-columns: repeat(6, 1fr);\n    }\n    #tag-selector #new-tags {\n      border-bottom: 1px dashed var(--theme-red-color);\n      padding: 0 0 5px;\n      margin: 5px 0;\n    }\n    #tag-selector #new-tag-input-label {\n      display: flex;\n    }\n    #tag-selector #new-tag-input {\n      max-width: none;\n      flex: 1;\n    }\n    #tag-selector label {\n      display: grid;\n      grid-template-columns: auto 1fr;\n      gap: 5px;\n      overflow: hidden;\n      white-space: nowrap;\n    }\n    #tag-selector label > span {\n      text-overflow: ellipsis;\n      overflow: hidden;\n    }\n  `\n\n  private get tagSelectorInputs() {\n    return Array.from<HTMLInputElement>(\n      this.renderRoot.querySelectorAll('#exists-tags input[type=checkbox]')\n    )\n  }\n\n  private newTagChangeHandler(event: Event) {\n    const newTagInput = event.currentTarget as unknown as HTMLInputElement\n    const tags = Array.from(\n      new Set(\n        newTagInput.value\n          .split(',')\n          .map((tag) => tag.trim())\n          .filter((tag) => tag)\n      )\n    )\n    const { newTags, existsTags } = tags.reduce<{\n      newTags: TempTag[]\n      existsTags: Tag[]\n    }>(\n      (acc, tag) => {\n        const existsTag = this.tags.find(({ name }) => name === tag)\n\n        if (existsTag) {\n          acc.existsTags.push(existsTag)\n        } else {\n          acc.newTags.push({ name: tag })\n        }\n\n        return acc\n      },\n      { newTags: [], existsTags: [] }\n    )\n    this.newTags = newTags\n    newTagInput.value = newTags.map(({ name }) => name).join(', ')\n\n    if (existsTags.length && this.tagSelectorInputs.length) {\n      const existsTagNames = existsTags.map(({ name }) => name)\n      this.tagSelectorInputs\n        .filter((input) => existsTagNames.indexOf(input.value) >= 0)\n        .forEach((input) => {\n          input.setAttribute('checked', '')\n        })\n    }\n  }\n\n  protected firstUpdated() {\n    this.fetchTags()\n  }\n\n  private async fetchTags() {\n    this.tags = await apis.getTags()\n  }\n\n  public get selectedTags(): (Tag | TempTag)[] {\n    const existsTags = Array.from(\n      this.renderRoot.querySelectorAll<HTMLInputElement>(\n        'input[type=checkbox].exists-tag'\n      )\n    )\n      .filter(({ checked }) => checked)\n      .map(({ id, value }) => ({ id, name: value } as Tag))\n    const newTags = Array.from(\n      this.renderRoot.querySelectorAll<HTMLInputElement>(\n        'input[type=checkbox].new-tag'\n      )\n    )\n      .filter(({ checked }) => checked)\n      .map(({ value }) => ({ name: value } as TempTag))\n\n    return [...existsTags, ...newTags]\n  }\n\n  render() {\n    return html`\n      <section id=\"tag-selector\" class=\"container\">\n        <header>\n          <h2>Tags</h2>\n        </header>\n\n        <label id=\"new-tag-input-label\">\n          <input\n            id=\"new-tag-input\"\n            @change=${this.newTagChangeHandler}\n            placeholder=\"Type tags here as csv format.\"\n          />\n        </label>\n\n        ${this.newTags.length\n          ? html`\n              <div id=\"new-tags\">\n                ${this.newTags.map(\n                  (tag) => html`<label>\n                    <input\n                      class=\"new-tag\"\n                      type=\"checkbox\"\n                      checked\n                      .value=${tag.name}\n                      disabled\n                    />\n                    <span>${tag.name}</span>\n                  </label>`\n                )}\n              </div>\n            `\n          : ''}\n\n        <div id=\"exists-tags\">\n          ${this.tags.map(\n            (tag) => html` <label>\n              <input\n                class=\"exists-tag\"\n                type=\"checkbox\"\n                ?checked=${this.chosenTags.findIndex(\n                  ({ name }) => name === tag.name\n                ) >= 0}\n                id=${tag.id}\n                .value=${tag.name}\n              />\n              <span>${tag.name}</span>\n            </label>`\n          )}\n        </div>\n      </section>\n    `\n  }\n}\n"]}