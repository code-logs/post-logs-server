{"version":3,"file":"fetcher.js","sourceRoot":"","sources":["../../../src/utils/fetcher.ts"],"names":[],"mappings":"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","sourcesContent":["import { BASE_URL } from '../constants/base-url.js'\n\nclass Fetcher {\n  private baseUrl: string\n\n  private beforeRequestHandler: () => void\n\n  private afterResponseHandler: () => void\n\n  private readonly headers: Record<string, string>\n\n  constructor(\n    baseUrl: string,\n    beforeRequestHandler: () => void,\n    afterResponseHandler: () => void\n  ) {\n    this.baseUrl = baseUrl\n    this.beforeRequestHandler = beforeRequestHandler\n    this.afterResponseHandler = afterResponseHandler\n    this.headers = {\n      'content-type': 'application/json',\n    }\n  }\n\n  private buildRequestURL(path: string) {\n    return `${this.baseUrl}${path}`\n  }\n\n  async get<TRes>(path: string, headers = {}): Promise<TRes> {\n    try {\n      this.beforeRequestHandler()\n      const response = await fetch(this.buildRequestURL(path), {\n        method: 'get',\n        headers: { ...this.headers, ...headers },\n      })\n\n      if (!response.ok) throw new Error(await response.text())\n\n      const json = await response.json()\n      return json\n    } catch (e) {\n      this.handleError(e)\n      throw e\n    } finally {\n      this.afterResponseHandler()\n    }\n  }\n\n  async post<TRes, TBody>(\n    path: string,\n    body?: TBody,\n    customHeaders = {}\n  ): Promise<TRes> {\n    try {\n      let data: FormData | string | undefined\n      let headers: Record<string, any> | undefined = {\n        ...this.headers,\n        ...customHeaders,\n      }\n      if (body instanceof FormData) {\n        data = body\n        headers = undefined\n      } else if (body) {\n        data = JSON.stringify(body)\n      }\n\n      this.beforeRequestHandler()\n      const response = await fetch(this.buildRequestURL(path), {\n        method: 'post',\n        headers,\n        body: data,\n      })\n\n      if (!response.ok) throw new Error(await response.text())\n\n      const json = await response.json()\n      return json\n    } catch (e) {\n      this.handleError(e)\n      throw e\n    } finally {\n      this.afterResponseHandler()\n    }\n  }\n\n  async put<TRes, TBody>(\n    path: string,\n    body?: TBody,\n    customHeaders = {}\n  ): Promise<TRes> {\n    try {\n      let data: FormData | string | undefined\n      let headers: Record<string, any> | undefined = {\n        ...this.headers,\n        ...customHeaders,\n      }\n      if (body instanceof FormData) {\n        data = body\n        headers = undefined\n      } else if (body) {\n        data = JSON.stringify(body)\n      }\n\n      this.beforeRequestHandler()\n      const response = await fetch(this.buildRequestURL(path), {\n        method: 'put',\n        headers,\n        body: data,\n      })\n\n      if (!response.ok) throw new Error(await response.text())\n\n      const json = await response.json()\n      return json\n    } catch (e) {\n      this.handleError(e)\n      throw e\n    } finally {\n      this.afterResponseHandler()\n    }\n  }\n\n  async delete<TRes>(path: string, customHeaders = {}): Promise<TRes> {\n    try {\n      this.beforeRequestHandler()\n      const response = await fetch(this.buildRequestURL(path), {\n        method: 'delete',\n        headers: { ...this.headers, ...customHeaders },\n      })\n\n      if (!response.ok) throw new Error(await response.text())\n\n      const json = await response.json()\n      return json\n    } catch (e) {\n      this.handleError(e)\n      throw e\n    } finally {\n      this.afterResponseHandler()\n    }\n  }\n\n  handleError(e: unknown) {\n    if (e instanceof Error) {\n      alert(e.message)\n    } else {\n      alert('Unexpected error ocurred')\n    }\n  }\n}\n\nexport default new Fetcher(\n  `${BASE_URL}/apis`,\n  () => {\n    window.dispatchEvent(new CustomEvent('loadingStart'))\n  },\n  () => {\n    window.dispatchEvent(new CustomEvent('loadingStop'))\n  }\n)\n"]}