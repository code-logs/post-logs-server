{"version":3,"file":"create-post.js","sourceRoot":"","sources":["../../../src/pages/create-post.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAkB,MAAM,KAAK,CAAA;AAC/C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAA;AAC3D,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACvC,OAAO,EAAE,QAAQ,EAAE,MAAM,wCAAwC,CAAA;AACjE,OAAO,4DAA4D,CAAA;AACnE,gDAAgD;AAChD,OAAO,sCAAsC,CAAA;AAI7C,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAA;AAC/C,OAAO,EAAE,WAAW,EAAE,MAAM,6BAA6B,CAAA;AAGzD,IAAa,UAAU,GAAvB,MAAa,UAAW,SAAQ,WAAW;IAA3C;;QACE,cAAS,GAAW,iBAAiB,CAAA;QAGrC,kBAAa,GAAkB,EAAE,CAAA;QAMzB,aAAQ,GAAkB,IAAI,CAAA;IA6ExC,CAAC;IA/CW,YAAY,CAAC,YAA4B;QACjD,KAAK,CAAC,YAAY,CAAC,YAAY,CAAC,CAAA;QAChC,IAAI,CAAC,WAAW,EAAE,CAAA;IACpB,CAAC;IAEO,KAAK,CAAC,WAAW;QACvB,IAAI,CAAC,QAAQ,GAAG,MAAM,IAAI,CAAC,WAAW,EAAE,CAAA;IAC1C,CAAC;IAED,IAAI,QAAQ;QACV,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,aAAa,CAAW,WAAW,CAAC,CAAA;QACrE,IAAI,CAAC,QAAQ;YAAE,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAA;QAElE,OAAO,QAAQ,CAAA;IACjB,CAAC;IAEO,KAAK,CAAC,iBAAiB;QAC7B,MAAM,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,CAAA;QACzD,IAAI,CAAC,IAAI,CAAC,OAAO;YAAE,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAA;QAEpD,MAAM,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,EAAE,SAAU,CAAC,CAAA;QAEzD,KAAK,CAAC,mBAAmB,CAAC,CAAA;QAC1B,QAAQ,CAAC,GAAG,CAAC,CAAA;IACf,CAAC;IAED,MAAM;QACJ,MAAM,kBAAkB,GAAG,QAAQ,CAAC,CAAC,KAAY,EAAE,EAAE;YACnD,IAAI,KAAK,YAAY,WAAW,EAAE;gBAChC,MAAM,EAAE,KAAK,EAAE,GAAI,KAAwC,CAAC,MAAM,CAAA;gBAClE,IAAI,CAAC,OAAO,GAAG,KAAK,CAAA;aACrB;QACH,CAAC,CAAC,CAAA;QAEF,OAAO,IAAI,CAAA;4BACa,IAAI,CAAC,OAAO,IAAI,EAAE;;;uBAGvB,kBAAkB;mBACtB,IAAI,CAAC,QAAQ,IAAI,EAAE;;;;yBAIb,IAAI,CAAC,iBAAiB;;gBAE/B,CAAA;IACd,CAAC;CACF,CAAA;AA3EQ,iBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GA0BlB,CAAA;AAlCD;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;iDACO;AAGjC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;2CACH;AAGxB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4CACW;AAV3B,UAAU;IADtB,aAAa,CAAC,aAAa,CAAC;GAChB,UAAU,CAuFtB;SAvFY,UAAU","sourcesContent":["import { css, html, PropertyValues } from 'lit'\nimport { customElement, property } from 'lit/decorators.js'\nimport { apis } from '../apis/index.js'\nimport { navigate } from '../components/dom-router/dom-router.js'\nimport '../components/markdown-view-editor/markdown-view-editor.js'\n// eslint-disable-next-line import/no-duplicates\nimport '../components/post-info/post-info.js'\n// eslint-disable-next-line import/no-duplicates\nimport { PostInfo } from '../components/post-info/post-info.js'\nimport { TempPostRef } from '../types/post-ref.js'\nimport { debounce } from '../utils/debounce.js'\nimport { PageElement } from './abstracts/page-element.js'\n\n@customElement('create-post')\nexport class CreatePost extends PageElement {\n  pageTitle: string = 'Post Logs | 글쓰기'\n\n  @property({ type: Array })\n  refCandidates: TempPostRef[] = []\n\n  @property({ type: String })\n  private content?: string\n\n  @property({ type: String })\n  private template: string | null = null\n\n  static styles = css`\n    section#create-post {\n      display: grid;\n      grid-template-columns: 1fr;\n      gap: 10px;\n    }\n    section#button-container {\n      display: grid;\n      gap: 10px;\n      justify-content: end;\n    }\n\n    button {\n      background-color: var(--theme-light-background-color);\n      height: 40px;\n      min-width: 120px;\n      border: 1px dashed var(--theme-red-color);\n      font-weight: 600;\n      transition: transform 0.2s ease-in-out 0s;\n    }\n    button:hover {\n      transform: scale(1.2, 1.2);\n    }\n    button:active {\n      transform: scale(1, 1);\n    }\n  `\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps)\n    this.getTemplate()\n  }\n\n  private async getTemplate() {\n    this.template = await apis.getTemplate()\n  }\n\n  get postInfo() {\n    const postInfo = this.renderRoot.querySelector<PostInfo>('post-info')\n    if (!postInfo) throw new Error('Failed to find post-info element')\n\n    return postInfo\n  }\n\n  private async createPostHandler() {\n    const { tempPost, thumbnail } = this.postInfo.serialize()\n    if (!this.content) throw new Error('작성된 포스팅이 없습니다.')\n\n    await apis.createPost(tempPost, this.content, thumbnail!)\n\n    alert('새로운 포스트가 등록 됐습니다.')\n    navigate('/')\n  }\n\n  render() {\n    const valueChangeHandler = debounce((event: Event) => {\n      if (event instanceof CustomEvent) {\n        const { value } = (event as CustomEvent<{ value: string }>).detail\n        this.content = value\n      }\n    })\n\n    return html`<section id=\"create-post\">\n      <post-info .content=${this.content || ''} createMode></post-info>\n\n      <markdown-view-editor\n        @valueChange=${valueChangeHandler}\n        .content=${this.template || ''}\n      ></markdown-view-editor>\n\n      <section id=\"button-container\">\n        <button @click=${this.createPostHandler}>저장</button>\n      </section>\n    </section> `\n  }\n}\n"]}